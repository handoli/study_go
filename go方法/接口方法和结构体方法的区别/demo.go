package main

import "fmt"

/*
结构体方法(一般方法):
	值类型接收者方法: 可以使用值或者指针进行调用
	指针类型接收者方法:	可以使用值或者指针进行调用

   【注意点】: 如果值类型不能被寻址时，则不能调用指针类型接收者方法

接口方法:
	值类型接收者方法: 可以使用值或者指针进行调用
	指针类型接收者方法:	只能用指针调用

   【注意点】: 接口方法，值类型不能调用指针类型的方法，解释有多种
			 最可信的是：存储在接口下的具体对象不可寻址，所以无法调用指针类型方法

Go中的左值和右值:
	1、左值：可寻址，能够通过&获取内存地址,也就是分配了内存; 左值可能出现在赋值号的左侧或右侧
			例子如下: 
				//变量a就是左值(分配了内存)，可以被赋值，也可以赋值给其他变量
				a := 10	
				b := a

	2、右值：不可寻址,没有分配内存, 只能出现在赋值号的右侧
			不可寻址包含:
				1.常量的值
				2.基本类型值的字面量
				3.算术操作的结果值
				4.对各种字面量的索引表达式和切片表达式的结果值
				  不过有一个例外，对切片字面量的索引结果值却是可寻址的
				5.对字符串变量的索引表达式和切片表达式的结果值
				6.对字典变量的索引表达式的结果值
				7.函数字面量和方法字面量，以及对它们的调用表达式的结果值
				8.结构体字面量的字段值，也就是对结构体字面量的选择表达式的结果值
				9.类型转换表达式的结果值
				10.类型断言表达式的结果值
				11.接收表达式的结果值
				 
*/

type T struct {
	S string
}

type I interface {
	A()
	B()
}

func (t T) A() {
	fmt.Println(t.S)
}

func (t *T) B() {
	fmt.Println(t.S)
}

//函数的返回值不能被寻址
func NewT() T {
	return T{"月宫"}
}

func main() {
	//结构体方法
	t := T{"normal method"}
	pt := &t
	t.A()
	t.B()
	pt.A()
	pt.B()

	//接口方法
	//var i I = T{"interface method"} //错误
	var i I = &T{"interface method"}
	i.A()
	i.B()

	//函数的返回值不能被寻址，返回的值类型不能调用指针方法，只能调用值类型方法
	// NewT().B() //指针方法
	NewT().A()	//值方法
}
